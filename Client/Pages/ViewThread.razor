@page "/thread/{threadId:int}"
@using WebForums.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (ThreadData == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table-bordered">
		@foreach (var post in ThreadData.Posts.OrderBy(p => p.Created))
		{
			<Post PostData=post />
		}

		<tr>
			<td>Reply:</td>
			<td>
				<EditForm Model="@postForm" OnValidSubmit="@HandleValidSubmit">
					<DataAnnotationsValidator />
					<ValidationSummary />
					<InputTextArea id="content" @bind-Value="postForm.Content"></InputTextArea>
					<button type="submit">Post</button>
				</EditForm>
			</td>
		</tr>
	</table>
}

@code {
	private PostForm postForm;
	private ThreadVM ThreadData { get; set; }

	[Parameter]
	public int ThreadId { get; set; }

	protected override void OnInitialized()
	{
		postForm = new()
		{
			ThreadId = ThreadId
		};
	}

	protected override async Task OnInitializedAsync()
	{
		var res = await Http.GetAsync($"/api/threads/{ThreadId}");

		if (res.IsSuccessStatusCode)
		{
			ThreadData = await res.Content.ReadFromJsonAsync<ThreadVM>();
		}
		else
		{
			NavigationManager.NavigateTo("404");
		}
	}

	private async Task HandleValidSubmit()
	{
		var res = await Http.PostAsJsonAsync<PostForm>($"/api/posts/", postForm);

		if (res.IsSuccessStatusCode)
		{
			postForm.Content = string.Empty;

			var post = await res.Content.ReadFromJsonAsync<PostVM>();
			ThreadData.Posts = ThreadData.Posts.Append(post);
		}
	}
}
